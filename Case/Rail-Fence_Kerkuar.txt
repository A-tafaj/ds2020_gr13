using System;

class RailFence
{

    // Function to string into grid form 
    static void gridStr(String str)
    {
        
int l = str.Length;
        int k = 0, row, column;
        row = (int)Math.Floor(Math.Sqrt(l));
        column = (int)Math.Ceiling(Math.Sqrt(l));

        if (row * column < l)
        {
            row = column;
        }

        char[,] s = new char[row, column];

        // convert the string into grid 
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < column; j++)
            {
                if (k < str.Length)
                    s[j, i] = str[k];
                k++;
            }
        }
        Console.WriteLine("Plaintext: "+str+"\n");

        // Printing the grid 
        Console.Write("Rail-fence: "+"\n");
        for (int i = 0; i < row; i++)
        {
            for (int j = 0; j < column; j++)
            {
                if (s[i, j] == 0)
                {
                    break;
                }
                Console.Write(s[i, j]+" ");
            }
            Console.WriteLine("");
        }
        Console.WriteLine();
        //+++++++++++++++++++++++++++++++++++++++++++++++++++
        char[] array1D = new char[16];
        int ci = 0;

        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 4; j++)
            {
                array1D[ci++] = s[i, j];
            }
        }
        Console.Write("Ciphertext: ");
        for (int i = 0; i < array1D.Length; i++)
        {
            Console.Write(array1D[i]);
        }
        Console.WriteLine();
        //+++++++++++++++++++++++++++++++++++++++++++++++++++

    }

    // Driver code 
    public static void Main()
    {
        String str = "1234567891234567";
        gridStr(str);
    }
}
