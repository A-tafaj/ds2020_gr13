using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
namespace ConsoleApp15
{

	class Program
	{

		 static void Main(string[] args)
		{
			string message = "this is a text message";
			string keyword1 = "example";
			string keyword2 = "keyboard";
			string message1 = "rccscsmmazrjatnyfe"
				;
			string encode0 = encode(message, keyword1, keyword2);
			string decode0 = decode(message1, keyword1, keyword2);
			Console.WriteLine("Encode: "  +encode0);
			Console.WriteLine("Decode: " + decode0);
		}


		private static string clean_string(string s)
		{
			string return_string = "";
			for (int i = 0; i < s.Length; i++)
			{
				char character = s[i];
				if (char.IsLetter(character) && character != 'q')
				{
					return_string += char.ToLower(character);
				}
			}
			return return_string;
		}
		private static string create_encoding(string key)
		{
			string keyword_encoding = "abcdefghijklmnoprstuvwxyz";
			for (int i = key.Length - 1; i >= 0; i -= 1)
			{
				if (key[i] != 'q')
				{
					var index = keyword_encoding.IndexOf(key[i]);
					keyword_encoding = keyword_encoding.Remove(index, 1);
					keyword_encoding = key[i] + keyword_encoding;
				}
			}
			return keyword_encoding;
		}
		private static string encode_digraph(string dg, string block1, string block2)
		{
			string encoded_digraph = "";
			string alphabet_block = "abcdefghijklmnoprstuvwxyz";
			char first_letter = dg[0];
			char second_letter = dg[1];
			int first_index = alphabet_block.IndexOf(first_letter);
			int second_index = alphabet_block.IndexOf(second_letter);
			int first_row = first_index / 5;
			int first_column = first_index % 5;
			int second_row = second_index / 5;
			int second_column = second_index % 5;
			int first_encoded_index = 5 * first_row + second_column;
			int second_encoded_index = 5 * second_row + first_column;
			char first_encoded_letter = block1[first_encoded_index];
			char second_encoded_letter = block2[second_encoded_index];
			encoded_digraph += first_encoded_letter;
			encoded_digraph += second_encoded_letter;
			return encoded_digraph;
		}
		private static string decode_digraph(string dg, string block1, string block2)
		{
			string decoded_digraph = "";
			string alphabet_block = "abcdefghijklmnoprstuvwxyz";
			char first_letter = dg[0];
			char second_letter = dg[1];
			int first_index = block1.IndexOf(first_letter);
			int second_index = block2.IndexOf(second_letter);
			int first_row = first_index / 5;
			int first_column = first_index % 5;
			int second_row = second_index / 5;
			int second_column = second_index % 5;
			int first_decoded_index = 5 * first_row + second_column;
			int second_decoded_index = 5 * second_row + first_column;
			char first_decoded_letter = alphabet_block[first_decoded_index];
			char second_decoded_letter = alphabet_block[second_decoded_index];
			decoded_digraph += first_decoded_letter;
			decoded_digraph += second_decoded_letter;
			return decoded_digraph;
		}
		private static string encode(string msg, string key1, string key2)
		{
			string encoded_message = "";
			string block1 = create_encoding(key1);
			string block2 = create_encoding(key2);
			string message = clean_string(msg);
			int message_length = message.Length;
			if (message_length % 2 == 1)
			{
				message += "x";
			}
			for (int i = 0; i < message_length; i += 2)
			{
				string digraph = message.Substring(i, 2);
				string encoded_digraph = encode_digraph(digraph, block1, block2);
				encoded_message += encoded_digraph;
			}
			return encoded_message;
		}
		private static string decode(string msg, string key1, string key2)
		{
			string decoded_message = "";
			string block1 = create_encoding(key1);
			string block2 = create_encoding(key2);
			string message = clean_string(msg);
			int message_length = message.Length;
			for (int i = 0; i < message_length; i += 2)
			{
				string digraph = message.Substring(i, 2);
				string decoded_digraph = decode_digraph(digraph, block1, block2);
				decoded_message += decoded_digraph;
			}
			return decoded_message;
		}
		
	}
}